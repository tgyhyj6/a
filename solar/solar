#!/usr/bin/env node
var date = require("datejs")
var suncalc = require('suncalc');
var homa = require('homa')
var systemId = homa.paramsWithDefaultSystemId("294028-solar");
												
(function connect() {
    homa.mqttHelper.connect();
})();

homa.mqttHelper.on('message', function(packet) {
	homa.settings.insert(packet.topic, packet.payload); // Check if a required settings value was received. If so, save it for later. 
	if (!homa.settings.isLocked() && homa.settings.isBootstrapCompleted()) {
		homa.settings.lock();
		homa.mqttHelper.publish("/devices/"+ systemId + "/controls/Sunset/meta/type", "text", true); // Creates device controls in interfaces
		homa.mqttHelper.publish("/devices/"+ systemId + "/controls/Sunrise/meta/type", "text", true); // Creates device controls in interfaces
		homa.scheduler.scheduleJob('0 0 * * *', querySuntimes); // Query every day at midnight
		querySuntimes(); // Query once now
	}
});

homa.mqttHelper.on('connect', function(packet) {	
	homa.settings.require('longitude'); // Set required settings
	homa.settings.require('latitude');
	// Some device meta values
	homa.mqttHelper.publish("/devices/"+ systemId + "/meta/name", "Dawn and Dusk" , true); // Friendly name of the device that is shown in the interface
	homa.mqttHelper.publish("/devices/"+ systemId + "/meta/room", "Weather" , true); // Room in which the device is
});

function querySuntimes(){
	homa.logger.info("SOLAR", "Querying solar positions for " + homa.settings.get("latitude") + ":"+ homa.settings.get("longitude"));
	var times = suncalc.getTimes(new Date(), homa.settings.get("latitude"), homa.settings.get("longitude"));
	homa.mqttHelper.publish("/devices/"+ systemId + "/controls/Sunrise", homa.stringHelper.pad(times.sunrise.getHours(), 2, "0") +":"+homa.stringHelper.pad(times.sunrise.getMinutes(), 2, "0"), true);
	homa.mqttHelper.publish("/devices/"+ systemId + "/controls/Sunset", homa.stringHelper.pad(times.sunset.getHours(), 2, "0")+":"+homa.stringHelper.pad(times.sunset.getMinutes(), 2, "0"), true);

	homa.mqttHelper.unschedulePublishes();
	var currentDate = new Date();
	for(key in times)
		if(times[key] > currentDate)
			homa.mqttHelper.schedulePublish(times[key], "/events/sun", key.toString(), false);
	

	homa.logger.info("SOLAR", "sunrise (top edge of the sun appears on the horizon): "+times.sunrise);
	homa.logger.info("SOLAR", "sunriseEnd (bottom edge of the sun touches the horizon): "+times.sunriseEnd);
	homa.logger.info("SOLAR", "goldenHourEnd (morning golden hour ends): "+times.goldenHourEnd);
	homa.logger.info("SOLAR", "solarNoon (solar noon (sun is in the highest position):"+times.solarNoon);
 	homa.logger.info("SOLAR", "goldenHour (evening golden hour starts): "+times.goldenHour);
	homa.logger.info("SOLAR", "sunsetStart (bottom edge of the sun touches the horizon): "+times.sunsetStart);
	homa.logger.info("SOLAR", "sunset (sun disappears below the horizon, evening civil twilight starts): "+times.sunset);
	homa.logger.info("SOLAR", "dusk (evening nautical twilight starts): "+times.dusk );
	homa.logger.info("SOLAR", "nauticalDusk (evening astronomical twilight starts): "+times.nauticalDusk);
	homa.logger.info("SOLAR", "night (dark enough for astronomical observations): "+times.night );
	homa.logger.info("SOLAR", "nightEnd (morning astronomical twilight starts): "+times.nightEnd );
	homa.logger.info("SOLAR", "nauticalDawn (morning nautical twilight starts): "+times.nauticalDawn);
	homa.logger.info("SOLAR", "dawn (morning nautical twilight ends, morning civil twilight starts): "+times.dawn);
}